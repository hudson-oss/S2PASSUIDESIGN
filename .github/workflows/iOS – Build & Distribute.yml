name: iOS â€“ Build & Distribute

on:
  workflow_dispatch:
    inputs:
      scheme:
        description: Xcode scheme name
        required: true
        default: S2PassUIDesignApp
      configuration:
        description: Build configuration
        required: true
        default: Release
      export_method:
        description: Export method (development or ad-hoc)
        required: true
        default: ad-hoc

env:
  APP_NAME: S2PASSUIDESIGN
  ARCHIVE_PATH: build/${{ github.run_id }}.xcarchive
  IPA_PATH: build/${{ github.run_id }}.ipa
  EXPORT_OPTIONS_PLIST: ci/exportOptionsAdHoc.plist
  KEYCHAIN: build.keychain
  KEYCHAIN_PASSWORD: temp_keychain_pw

jobs:
  adhoc_ipa:
    name: Build Ad Hoc .ipa (downloadable)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          test -n "${{ secrets.CERT_P12 }}" || { echo "Missing CERT_P12 (base64 of .p12)."; exit 1; }
          test -n "${{ secrets.CERT_PASSWORD }}" || { echo "Missing CERT_PASSWORD."; exit 1; }
          test -n "${{ secrets.PROVISIONING_PROFILE }}" || { echo "Missing PROVISIONING_PROFILE (base64 of .mobileprovision)."; exit 1; }
          test -n "${{ secrets.BUNDLE_ID }}" || { echo "Missing BUNDLE_ID (must match provisioning profile)."; exit 1; }

      - name: Xcode version
        run: |
          xcodebuild -version
          swift --version

      - name: Create temporary keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security list-keychain -d user -s "$KEYCHAIN" login.keychain-db

      - name: Decode signing cert and provisioning profile
        run: |
          echo "${{ secrets.CERT_P12 }}" | base64 --decode > cert.p12
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision
          if ! /usr/bin/security cms -D -i profile.mobileprovision > profile.plist; then
            echo "Failed to decode provisioning profile. Ensure PROVISIONING_PROFILE is valid base64." >&2
            exit 1
          fi
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist) || { echo "Unable to read UUID from profile."; exit 1; }
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV

      - name: Import signing certificate
        run: |
          security import cert.p12 -k "$KEYCHAIN" -P "${{ secrets.CERT_PASSWORD }}" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

      - name: Resolve workspace/project (repo root or subdirs)
        id: resolve
        shell: bash
        run: |
          # Look for xcodeproj/xcworkspace anywhere under repo
          set -e
          WORKSPACE=$(find . -maxdepth 3 -name "*.xcworkspace" | head -n 1 || true)
          PROJECT=$(find . -maxdepth 3 -name "*.xcodeproj" | head -n 1 || true)
          if [ -n "$WORKSPACE" ]; then
            echo "kind=workspace" >> $GITHUB_OUTPUT
            echo "path=$WORKSPACE" >> $GITHUB_OUTPUT
            echo "dir=$(dirname "$WORKSPACE")" >> $GITHUB_OUTPUT
          elif [ -n "$PROJECT" ]; then
            echo "kind=project" >> $GITHUB_OUTPUT
            echo "path=$PROJECT" >> $GITHUB_OUTPUT
            echo "dir=$(dirname "$PROJECT")" >> $GITHUB_OUTPUT
          else
            echo "No Xcode project or workspace found. Commit your .xcodeproj/.xcworkspace." >&2
            exit 1
          fi

      - name: Xcode Archive
        working-directory: ${{ steps.resolve.outputs.dir }}
        run: |
          set -euo pipefail
          if [ "${{ steps.resolve.outputs.kind }}" = "workspace" ]; then
            xcodebuild archive               -workspace "$(basename "${{ steps.resolve.outputs.path }}")"               -scheme "${{ inputs.scheme }}"               -configuration "${{ inputs.configuration }}"               -archivePath "$PWD/../${{ env.ARCHIVE_PATH }}"               -destination 'generic/platform=iOS'               PRODUCT_BUNDLE_IDENTIFIER="${{ secrets.BUNDLE_ID }}"               CODE_SIGN_STYLE=Manual               PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID"               OTHER_CODE_SIGN_FLAGS="--keychain ${{ env.KEYCHAIN }}"               clean | xcpretty && exit ${PIPESTATUS[0]}
          else
            xcodebuild archive               -project "$(basename "${{ steps.resolve.outputs.path }}")"               -scheme "${{ inputs.scheme }}"               -configuration "${{ inputs.configuration }}"               -archivePath "$PWD/../${{ env.ARCHIVE_PATH }}"               -destination 'generic/platform=iOS'               PRODUCT_BUNDLE_IDENTIFIER="${{ secrets.BUNDLE_ID }}"               CODE_SIGN_STYLE=Manual               PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID"               OTHER_CODE_SIGN_FLAGS="--keychain ${{ env.KEYCHAIN }}"               clean | xcpretty && exit ${PIPESTATUS[0]}
          fi

      - name: Prepare Export Options
        run: |
          /usr/libexec/PlistBuddy -c "Set :method ${{ inputs.export_method }}" "$EXPORT_OPTIONS_PLIST"
          /usr/libexec/PlistBuddy -c "Delete :provisioningProfiles" "$EXPORT_OPTIONS_PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" "$EXPORT_OPTIONS_PLIST"
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:${{ secrets.BUNDLE_ID }} string $PROFILE_UUID" "$EXPORT_OPTIONS_PLIST"

      - name: Export .ipa
        run: |
          xcodebuild -exportArchive             -archivePath "${{ env.ARCHIVE_PATH }}"             -exportPath build             -exportOptionsPlist "$EXPORT_OPTIONS_PLIST"

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: S2PASSUIDESIGN_${{ github.run_id }}_${{ inputs.export_method }}.ipa
          path: build/*.ipa
