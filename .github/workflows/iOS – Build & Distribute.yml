name: iOS â€“ Build & Distribute

on:
  workflow_dispatch:
    inputs:
      scheme:
        description: Xcode scheme name
        required: true
        default: S2PassUIDesignApp
      configuration:
        description: Build configuration
        required: true
        default: Release
      export_method:
        description: Export method (development or ad-hoc)
        required: true
        default: ad-hoc

env:
  BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
  APP_NAME: S2PASSUIDESIGN
  ARCHIVE_PATH: build/${{ github.run_id }}.xcarchive
  IPA_PATH: build/${{ github.run_id }}.ipa
  EXPORT_OPTIONS_PLIST: ci/exportOptionsAdHoc.plist
  KEYCHAIN: build.keychain
  KEYCHAIN_PASSWORD: temp_keychain_pw

jobs:
  adhoc_ipa:
    name: Build Ad Hoc .ipa (downloadable)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Xcode version
        run: |
          xcodebuild -version
          swift --version

      - name: Create temporary keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN" # 6h timeout
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security list-keychain -d user -s "$KEYCHAIN" login.keychain-db

      - name: Decode signing cert and provisioning profile
        run: |
          echo "${{ secrets.CERT_P12 }}" | base64 --decode > cert.p12
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$( /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(/usr/bin/security cms -D -i profile.mobileprovision) )
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV

      - name: Import signing certificate
        run: |
          security import cert.p12 -k "$KEYCHAIN" -P "${{ secrets.CERT_PASSWORD }}" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

      - name: Resolve workspace/project
        id: resolve
        run: |
          WORKSPACE=$(ls -1 *.xcworkspace 2>/dev/null | head -n 1 || true)
          PROJECT=$(ls -1 *.xcodeproj 2>/dev/null | head -n 1 || true)
          if [ -n "$WORKSPACE" ]; then
            echo "kind=workspace" >> $GITHUB_OUTPUT
            echo "path=$WORKSPACE" >> $GITHUB_OUTPUT
          elif [ -n "$PROJECT" ]; then
            echo "kind=project" >> $GITHUB_OUTPUT
            echo "path=$PROJECT" >> $GITHUB_OUTPUT
          else
            echo "No Xcode project or workspace found in repo root." >&2
            exit 1
          fi

      - name: Xcode Archive
        run: |
          set -euo pipefail
          if [ "${{ steps.resolve.outputs.kind }}" = "workspace" ]; then
            xcodebuild archive               -workspace "${{ steps.resolve.outputs.path }}"               -scheme "${{ inputs.scheme }}"               -configuration "${{ inputs.configuration }}"               -archivePath "$ARCHIVE_PATH"               -destination 'generic/platform=iOS'               PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID"               CODE_SIGN_STYLE=Manual               PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID"               OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN"               clean | xcpretty && exit ${PIPESTATUS[0]}
          else
            xcodebuild archive               -project "${{ steps.resolve.outputs.path }}"               -scheme "${{ inputs.scheme }}"               -configuration "${{ inputs.configuration }}"               -archivePath "$ARCHIVE_PATH"               -destination 'generic/platform=iOS'               PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID"               CODE_SIGN_STYLE=Manual               PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID"               OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN"               clean | xcpretty && exit ${PIPESTATUS[0]}
          fi

      - name: Export .ipa
        run: |
          /usr/libexec/PlistBuddy -c "Set :method ${{ inputs.export_method }}" "$EXPORT_OPTIONS_PLIST"
          xcodebuild -exportArchive             -archivePath "$ARCHIVE_PATH"             -exportPath build             -exportOptionsPlist "$EXPORT_OPTIONS_PLIST"

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: S2PASSUIDESIGN_${{ github.run_id }}_${{ inputs.export_method }}.ipa
          path: build/*.ipa

  testflight:
    name: Build & Upload to TestFlight
    runs-on: macos-14
    if: ${{ false }} # flip to true when you are ready for TestFlight
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install Fastlane
        run: gem install fastlane

      - name: App Store Connect API Key
        run: |
          mkdir -p ~/.appstoreconnect
          echo "${{ secrets.APPSTORE_CONNECT_API_KEY_JSON }}" > ~/.appstoreconnect/key.json

      - name: Fastlane Beta (TestFlight)
        env:
          ASC_API_KEY_PATH: ~/.appstoreconnect/key.json
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cat > Fastfile <<'LANE'
          default_platform(:ios)
          platform :ios do
            lane :beta do
              build_app(
                scheme: ENV['SCHEME'] || 'S2PassUIDesignApp',
                export_method: "app-store"
              )
              upload_to_testflight(
                skip_waiting_for_build_processing: false
              )
            end
          end
          LANE
          fastlane beta
